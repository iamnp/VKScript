//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from VKScript.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class VKScriptParser : Parser {
	public const int
		INT=1, STRING=2, BOOL=3, COLON=4, DOT=5, COMMA=6, ASSIGN=7, EQ=8, NOTEQ=9, 
		AND=10, OR=11, PLUS=12, MINUS=13, MUL=14, DIV=15, MOD=16, LESS_THAN=17, 
		LESS_EQ_THAN=18, GREATER_THAN=19, GREATER_EQ_THAN=20, LBRACKET=21, RBRACKET=22, 
		LCBRACKET=23, RCBRACKET=24, IF=25, ELSE=26, WHILE=27, COMMENT=28, NEWLINE=29, 
		WS=30, ID=31;
	public const int
		RULE_vk_script = 0, RULE_function_call = 1, RULE_literal = 2, RULE_list = 3, 
		RULE_pair = 4, RULE_expr = 5, RULE_primitive = 6, RULE_assign = 7, RULE_if_else_statement = 8, 
		RULE_while_statement = 9, RULE_statement = 10, RULE_output = 11;
	public static readonly string[] ruleNames = {
		"vk_script", "function_call", "literal", "list", "pair", "expr", "primitive", 
		"assign", "if_else_statement", "while_statement", "statement", "output"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "':'", "'.'", "','", "'='", "'=='", "'!='", "'&&'", 
		"'||'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'<='", "'>'", "'>='", 
		"'('", "')'", "'{'", "'}'", "'if'", "'else'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "BOOL", "COLON", "DOT", "COMMA", "ASSIGN", "EQ", 
		"NOTEQ", "AND", "OR", "PLUS", "MINUS", "MUL", "DIV", "MOD", "LESS_THAN", 
		"LESS_EQ_THAN", "GREATER_THAN", "GREATER_EQ_THAN", "LBRACKET", "RBRACKET", 
		"LCBRACKET", "RCBRACKET", "IF", "ELSE", "WHILE", "COMMENT", "NEWLINE", 
		"WS", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VKScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VKScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Vk_scriptContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public Vk_scriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vk_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterVk_script(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitVk_script(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVk_script(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vk_scriptContext vk_script() {
		Vk_scriptContext _localctx = new Vk_scriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_vk_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << BOOL) | (1L << MINUS) | (1L << LBRACKET) | (1L << LCBRACKET) | (1L << IF) | (1L << WHILE) | (1L << NEWLINE) | (1L << ID))) != 0)) {
				{
				State = 26;
				switch (TokenStream.La(1)) {
				case INT:
				case STRING:
				case BOOL:
				case MINUS:
				case LBRACKET:
				case LCBRACKET:
				case IF:
				case WHILE:
				case ID:
					{
					State = 24; statement();
					}
					break;
				case NEWLINE:
					{
					State = 25; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OneFuncContext : Function_callContext {
		public ITerminalNode[] ID() { return GetTokens(VKScriptParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(VKScriptParser.ID, i);
		}
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(VKScriptParser.DOT, 0); }
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public OneFuncContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterOneFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitOneFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChainedFuncContext : Function_callContext {
		public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(VKScriptParser.DOT, 0); }
		public ChainedFuncContext(Function_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterChainedFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitChainedFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		return function_call(0);
	}

	private Function_callContext function_call(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Function_callContext _localctx = new Function_callContext(Context, _parentState);
		Function_callContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_function_call, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new OneFuncContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 37;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 34;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 32; Match(ID);
					}
					break;
				case 2:
					{
					State = 33; literal();
					}
					break;
				}
				State = 36; Match(DOT);
				}
				break;
			}
			State = 39; Match(ID);
			State = 40; Match(LBRACKET);
			State = 42;
			_la = TokenStream.La(1);
			if (_la==LCBRACKET) {
				{
				State = 41; list();
				}
			}

			State = 44; Match(RBRACKET);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ChainedFuncContext(new Function_callContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_function_call);
					State = 46;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 47; Match(DOT);
					State = 48; function_call(2);
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_literal);
		try {
			State = 57;
			switch (TokenStream.La(1)) {
			case INT:
			case STRING:
			case BOOL:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; primitive();
				}
				break;
			case LCBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; list();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56; pair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ITerminalNode LCBRACKET() { return GetToken(VKScriptParser.LCBRACKET, 0); }
		public ITerminalNode RCBRACKET() { return GetToken(VKScriptParser.RCBRACKET, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VKScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VKScriptParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 6, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(LCBRACKET);
			State = 68;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << BOOL) | (1L << MINUS) | (1L << LBRACKET) | (1L << LCBRACKET) | (1L << ID))) != 0)) {
				{
				State = 60; expr(0);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 61; Match(COMMA);
					State = 62; expr(0);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 70; Match(RCBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(VKScriptParser.COLON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 8, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(ID);
			State = 73; Match(COLON);
			State = 74; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPairContext : ExprContext {
		public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		public ExprPairContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPair(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBracketsContext : ExprContext {
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ExprBracketsContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprBrackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorGreaterThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(VKScriptParser.GREATER_THAN, 0); }
		public ExprOperatorGreaterThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorGreaterThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorGreaterThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorGreaterThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorPlusContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VKScriptParser.PLUS, 0); }
		public ExprOperatorPlusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorDivContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VKScriptParser.DIV, 0); }
		public ExprOperatorDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorMinusContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VKScriptParser.MINUS, 0); }
		public ExprOperatorMinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorNotEqContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode NOTEQ() { return GetToken(VKScriptParser.NOTEQ, 0); }
		public ExprOperatorNotEqContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorNotEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorNotEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorNotEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralContext : ExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExprLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(VKScriptParser.OR, 0); }
		public ExprOperatorOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprFuncCallContext : ExprContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExprFuncCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorAndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VKScriptParser.AND, 0); }
		public ExprOperatorAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorEqContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VKScriptParser.EQ, 0); }
		public ExprOperatorEqContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIdContext : ExprContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ExprIdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorModContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VKScriptParser.MOD, 0); }
		public ExprOperatorModContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorLessThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LESS_THAN() { return GetToken(VKScriptParser.LESS_THAN, 0); }
		public ExprOperatorLessThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorLessThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorLessThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorLessThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorLessEqThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LESS_EQ_THAN() { return GetToken(VKScriptParser.LESS_EQ_THAN, 0); }
		public ExprOperatorLessEqThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorLessEqThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorLessEqThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorLessEqThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorMulContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(VKScriptParser.MUL, 0); }
		public ExprOperatorMulContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorGreaterEqThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GREATER_EQ_THAN() { return GetToken(VKScriptParser.GREATER_EQ_THAN, 0); }
		public ExprOperatorGreaterEqThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorGreaterEqThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorGreaterEqThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorGreaterEqThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new ExprPairContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 77; pair();
				}
				break;
			case 2:
				{
				_localctx = new ExprFuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78; function_call(0);
				}
				break;
			case 3:
				{
				_localctx = new ExprIdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; Match(ID);
				}
				break;
			case 4:
				{
				_localctx = new ExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80; literal();
				}
				break;
			case 5:
				{
				_localctx = new ExprBracketsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 81; Match(LBRACKET);
				State = 82; expr(0);
				State = 83; Match(RBRACKET);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new ExprOperatorModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 87;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 88; Match(MOD);
						State = 89; expr(15);
						}
						break;
					case 2:
						{
						_localctx = new ExprOperatorMulContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 90;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 91; Match(MUL);
						State = 92; expr(14);
						}
						break;
					case 3:
						{
						_localctx = new ExprOperatorDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 93;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 94; Match(DIV);
						State = 95; expr(13);
						}
						break;
					case 4:
						{
						_localctx = new ExprOperatorPlusContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 97; Match(PLUS);
						State = 98; expr(12);
						}
						break;
					case 5:
						{
						_localctx = new ExprOperatorMinusContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 100; Match(MINUS);
						State = 101; expr(11);
						}
						break;
					case 6:
						{
						_localctx = new ExprOperatorEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 103; Match(EQ);
						State = 104; expr(10);
						}
						break;
					case 7:
						{
						_localctx = new ExprOperatorNotEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 105;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 106; Match(NOTEQ);
						State = 107; expr(9);
						}
						break;
					case 8:
						{
						_localctx = new ExprOperatorLessThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 108;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 109; Match(LESS_THAN);
						State = 110; expr(8);
						}
						break;
					case 9:
						{
						_localctx = new ExprOperatorLessEqThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 111;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 112; Match(LESS_EQ_THAN);
						State = 113; expr(7);
						}
						break;
					case 10:
						{
						_localctx = new ExprOperatorGreaterThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 114;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 115; Match(GREATER_THAN);
						State = 116; expr(6);
						}
						break;
					case 11:
						{
						_localctx = new ExprOperatorGreaterEqThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 117;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 118; Match(GREATER_EQ_THAN);
						State = 119; expr(5);
						}
						break;
					case 12:
						{
						_localctx = new ExprOperatorAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 120;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 121; Match(AND);
						State = 122; expr(4);
						}
						break;
					case 13:
						{
						_localctx = new ExprOperatorOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 123;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 124; Match(OR);
						State = 125; expr(3);
						}
						break;
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(VKScriptParser.INT, 0); }
		public ITerminalNode MINUS() { return GetToken(VKScriptParser.MINUS, 0); }
		public ITerminalNode STRING() { return GetToken(VKScriptParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(VKScriptParser.BOOL, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_primitive);
		int _la;
		try {
			State = 137;
			switch (TokenStream.La(1)) {
			case INT:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				_la = TokenStream.La(1);
				if (_la==MINUS) {
					{
					State = 131; Match(MINUS);
					}
				}

				State = 134; Match(INT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; Match(STRING);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(VKScriptParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 14, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(ID);
			State = 140; Match(ASSIGN);
			State = 141; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_else_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VKScriptParser.IF, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ITerminalNode[] LCBRACKET() { return GetTokens(VKScriptParser.LCBRACKET); }
		public ITerminalNode LCBRACKET(int i) {
			return GetToken(VKScriptParser.LCBRACKET, i);
		}
		public Vk_scriptContext[] vk_script() {
			return GetRuleContexts<Vk_scriptContext>();
		}
		public Vk_scriptContext vk_script(int i) {
			return GetRuleContext<Vk_scriptContext>(i);
		}
		public ITerminalNode[] RCBRACKET() { return GetTokens(VKScriptParser.RCBRACKET); }
		public ITerminalNode RCBRACKET(int i) {
			return GetToken(VKScriptParser.RCBRACKET, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public ITerminalNode ELSE() { return GetToken(VKScriptParser.ELSE, 0); }
		public If_else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterIf_else_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitIf_else_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_else_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_else_statementContext if_else_statement() {
		If_else_statementContext _localctx = new If_else_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_if_else_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(IF);
			State = 144; Match(LBRACKET);
			State = 145; expr(0);
			State = 146; Match(RBRACKET);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 147; Match(NEWLINE);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 153; Match(LCBRACKET);
			State = 154; vk_script();
			State = 155; Match(RCBRACKET);
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 156; Match(NEWLINE);
					}
					}
					State = 161;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 162; Match(ELSE);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 163; Match(NEWLINE);
					}
					}
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 169; Match(LCBRACKET);
				State = 170; vk_script();
				State = 171; Match(RCBRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VKScriptParser.WHILE, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ITerminalNode LCBRACKET() { return GetToken(VKScriptParser.LCBRACKET, 0); }
		public Vk_scriptContext vk_script() {
			return GetRuleContext<Vk_scriptContext>(0);
		}
		public ITerminalNode RCBRACKET() { return GetToken(VKScriptParser.RCBRACKET, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(WHILE);
			State = 176; Match(LBRACKET);
			State = 177; expr(0);
			State = 178; Match(RBRACKET);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 179; Match(NEWLINE);
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 185; Match(LCBRACKET);
			State = 186; vk_script();
			State = 187; Match(RCBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public If_else_statementContext if_else_statement() {
			return GetRuleContext<If_else_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; assign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; output();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; if_else_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; while_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 22, RULE_output);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return function_call_sempred((Function_callContext)_localctx, predIndex);
		case 5: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool function_call_sempred(Function_callContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3!\xC8");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3");
		sb.Append("\x2\x3\x2\a\x2\x1D\n\x2\f\x2\xE\x2 \v\x2\x3\x3\x3\x3\x3\x3\x5");
		sb.Append("\x3%\n\x3\x3\x3\x5\x3(\n\x3\x3\x3\x3\x3\x3\x3\x5\x3-\n\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x34\n\x3\f\x3\xE\x3\x37\v\x3");
		sb.Append("\x3\x4\x3\x4\x3\x4\x5\x4<\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5");
		sb.Append("\x42\n\x5\f\x5\xE\x5\x45\v\x5\x5\x5G\n\x5\x3\x5\x3\x5\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x5\aX\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\a\x81\n\a\f\a\xE\a\x84\v\a\x3");
		sb.Append("\b\x5\b\x87\n\b\x3\b\x3\b\x3\b\x5\b\x8C\n\b\x3\t\x3\t\x3\t\x3");
		sb.Append("\t\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x97\n\n\f\n\xE\n\x9A\v\n\x3");
		sb.Append("\n\x3\n\x3\n\x3\n\a\n\xA0\n\n\f\n\xE\n\xA3\v\n\x3\n\x3\n\a\n");
		sb.Append("\xA7\n\n\f\n\xE\n\xAA\v\n\x3\n\x3\n\x3\n\x3\n\x5\n\xB0\n\n\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\x3\v\a\v\xB7\n\v\f\v\xE\v\xBA\v\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f\xC4\n\f\x3\r\x3\r\x3\r");
		sb.Append("\x2\x4\x4\f\xE\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x2\x2\xE1");
		sb.Append("\x2\x1E\x3\x2\x2\x2\x4!\x3\x2\x2\x2\x6;\x3\x2\x2\x2\b=\x3\x2");
		sb.Append("\x2\x2\nJ\x3\x2\x2\x2\fW\x3\x2\x2\x2\xE\x8B\x3\x2\x2\x2\x10");
		sb.Append("\x8D\x3\x2\x2\x2\x12\x91\x3\x2\x2\x2\x14\xB1\x3\x2\x2\x2\x16");
		sb.Append("\xC3\x3\x2\x2\x2\x18\xC5\x3\x2\x2\x2\x1A\x1D\x5\x16\f\x2\x1B");
		sb.Append("\x1D\a\x1F\x2\x2\x1C\x1A\x3\x2\x2\x2\x1C\x1B\x3\x2\x2\x2\x1D");
		sb.Append(" \x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F\x3");
		sb.Append("\x3\x2\x2\x2 \x1E\x3\x2\x2\x2!\'\b\x3\x1\x2\"%\a!\x2\x2#%\x5");
		sb.Append("\x6\x4\x2$\"\x3\x2\x2\x2$#\x3\x2\x2\x2%&\x3\x2\x2\x2&(\a\a\x2");
		sb.Append("\x2\'$\x3\x2\x2\x2\'(\x3\x2\x2\x2()\x3\x2\x2\x2)*\a!\x2\x2*");
		sb.Append(",\a\x17\x2\x2+-\x5\b\x5\x2,+\x3\x2\x2\x2,-\x3\x2\x2\x2-.\x3");
		sb.Append("\x2\x2\x2./\a\x18\x2\x2/\x35\x3\x2\x2\x2\x30\x31\f\x3\x2\x2");
		sb.Append("\x31\x32\a\a\x2\x2\x32\x34\x5\x4\x3\x4\x33\x30\x3\x2\x2\x2\x34");
		sb.Append("\x37\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36");
		sb.Append("\x5\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x38<\x5\xE\b\x2\x39<\x5");
		sb.Append("\b\x5\x2:<\x5\n\x6\x2;\x38\x3\x2\x2\x2;\x39\x3\x2\x2\x2;:\x3");
		sb.Append("\x2\x2\x2<\a\x3\x2\x2\x2=\x46\a\x19\x2\x2>\x43\x5\f\a\x2?@\a");
		sb.Append("\b\x2\x2@\x42\x5\f\a\x2\x41?\x3\x2\x2\x2\x42\x45\x3\x2\x2\x2");
		sb.Append("\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45");
		sb.Append("\x43\x3\x2\x2\x2\x46>\x3\x2\x2\x2\x46G\x3\x2\x2\x2GH\x3\x2\x2");
		sb.Append("\x2HI\a\x1A\x2\x2I\t\x3\x2\x2\x2JK\a!\x2\x2KL\a\x6\x2\x2LM\x5");
		sb.Append("\f\a\x2M\v\x3\x2\x2\x2NO\b\a\x1\x2OX\x5\n\x6\x2PX\x5\x4\x3\x2");
		sb.Append("QX\a!\x2\x2RX\x5\x6\x4\x2ST\a\x17\x2\x2TU\x5\f\a\x2UV\a\x18");
		sb.Append("\x2\x2VX\x3\x2\x2\x2WN\x3\x2\x2\x2WP\x3\x2\x2\x2WQ\x3\x2\x2");
		sb.Append("\x2WR\x3\x2\x2\x2WS\x3\x2\x2\x2X\x82\x3\x2\x2\x2YZ\f\x10\x2");
		sb.Append("\x2Z[\a\x12\x2\x2[\x81\x5\f\a\x11\\]\f\xF\x2\x2]^\a\x10\x2\x2");
		sb.Append("^\x81\x5\f\a\x10_`\f\xE\x2\x2`\x61\a\x11\x2\x2\x61\x81\x5\f");
		sb.Append("\a\xF\x62\x63\f\r\x2\x2\x63\x64\a\xE\x2\x2\x64\x81\x5\f\a\xE");
		sb.Append("\x65\x66\f\f\x2\x2\x66g\a\xF\x2\x2g\x81\x5\f\a\rhi\f\v\x2\x2");
		sb.Append("ij\a\n\x2\x2j\x81\x5\f\a\fkl\f\n\x2\x2lm\a\v\x2\x2m\x81\x5\f");
		sb.Append("\a\vno\f\t\x2\x2op\a\x13\x2\x2p\x81\x5\f\a\nqr\f\b\x2\x2rs\a");
		sb.Append("\x14\x2\x2s\x81\x5\f\a\ttu\f\a\x2\x2uv\a\x15\x2\x2v\x81\x5\f");
		sb.Append("\a\bwx\f\x6\x2\x2xy\a\x16\x2\x2y\x81\x5\f\a\az{\f\x5\x2\x2{");
		sb.Append("|\a\f\x2\x2|\x81\x5\f\a\x6}~\f\x4\x2\x2~\x7F\a\r\x2\x2\x7F\x81");
		sb.Append("\x5\f\a\x5\x80Y\x3\x2\x2\x2\x80\\\x3\x2\x2\x2\x80_\x3\x2\x2");
		sb.Append("\x2\x80\x62\x3\x2\x2\x2\x80\x65\x3\x2\x2\x2\x80h\x3\x2\x2\x2");
		sb.Append("\x80k\x3\x2\x2\x2\x80n\x3\x2\x2\x2\x80q\x3\x2\x2\x2\x80t\x3");
		sb.Append("\x2\x2\x2\x80w\x3\x2\x2\x2\x80z\x3\x2\x2\x2\x80}\x3\x2\x2\x2");
		sb.Append("\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2");
		sb.Append("\x83\r\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x87\a\xF\x2\x2\x86");
		sb.Append("\x85\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88");
		sb.Append("\x8C\a\x3\x2\x2\x89\x8C\a\x4\x2\x2\x8A\x8C\a\x5\x2\x2\x8B\x86");
		sb.Append("\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\xF");
		sb.Append("\x3\x2\x2\x2\x8D\x8E\a!\x2\x2\x8E\x8F\a\t\x2\x2\x8F\x90\x5\f");
		sb.Append("\a\x2\x90\x11\x3\x2\x2\x2\x91\x92\a\x1B\x2\x2\x92\x93\a\x17");
		sb.Append("\x2\x2\x93\x94\x5\f\a\x2\x94\x98\a\x18\x2\x2\x95\x97\a\x1F\x2");
		sb.Append("\x2\x96\x95\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x96\x3\x2\x2");
		sb.Append("\x2\x98\x99\x3\x2\x2\x2\x99\x9B\x3\x2\x2\x2\x9A\x98\x3\x2\x2");
		sb.Append("\x2\x9B\x9C\a\x19\x2\x2\x9C\x9D\x5\x2\x2\x2\x9D\xAF\a\x1A\x2");
		sb.Append("\x2\x9E\xA0\a\x1F\x2\x2\x9F\x9E\x3\x2\x2\x2\xA0\xA3\x3\x2\x2");
		sb.Append("\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3\x2\x2");
		sb.Append("\x2\xA3\xA1\x3\x2\x2\x2\xA4\xA8\a\x1C\x2\x2\xA5\xA7\a\x1F\x2");
		sb.Append("\x2\xA6\xA5\x3\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2");
		sb.Append("\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA8\x3\x2\x2");
		sb.Append("\x2\xAB\xAC\a\x19\x2\x2\xAC\xAD\x5\x2\x2\x2\xAD\xAE\a\x1A\x2");
		sb.Append("\x2\xAE\xB0\x3\x2\x2\x2\xAF\xA1\x3\x2\x2\x2\xAF\xB0\x3\x2\x2");
		sb.Append("\x2\xB0\x13\x3\x2\x2\x2\xB1\xB2\a\x1D\x2\x2\xB2\xB3\a\x17\x2");
		sb.Append("\x2\xB3\xB4\x5\f\a\x2\xB4\xB8\a\x18\x2\x2\xB5\xB7\a\x1F\x2\x2");
		sb.Append("\xB6\xB5\x3\x2\x2\x2\xB7\xBA\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2");
		sb.Append("\xB8\xB9\x3\x2\x2\x2\xB9\xBB\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2");
		sb.Append("\xBB\xBC\a\x19\x2\x2\xBC\xBD\x5\x2\x2\x2\xBD\xBE\a\x1A\x2\x2");
		sb.Append("\xBE\x15\x3\x2\x2\x2\xBF\xC4\x5\x10\t\x2\xC0\xC4\x5\x18\r\x2");
		sb.Append("\xC1\xC4\x5\x12\n\x2\xC2\xC4\x5\x14\v\x2\xC3\xBF\x3\x2\x2\x2");
		sb.Append("\xC3\xC0\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC2\x3\x2\x2\x2");
		sb.Append("\xC4\x17\x3\x2\x2\x2\xC5\xC6\x5\f\a\x2\xC6\x19\x3\x2\x2\x2\x16");
		sb.Append("\x1C\x1E$\',\x35;\x43\x46W\x80\x82\x86\x8B\x98\xA1\xA8\xAF\xB8");
		sb.Append("\xC3");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
