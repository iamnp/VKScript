//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from VKScript.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class VKScriptParser : Parser {
	public const int
		INT=1, STRING=2, BOOL=3, COLON=4, DOT=5, COMMA=6, ASSIGN=7, EQ=8, NOTEQ=9, 
		AND=10, OR=11, PLUS=12, MINUS=13, MUL=14, DIV=15, MOD=16, LESS_THAN=17, 
		LESS_EQ_THAN=18, GREATER_THAN=19, GREATER_EQ_THAN=20, LBRACKET=21, RBRACKET=22, 
		LCBRACKET=23, RCBRACKET=24, IF=25, ELSE=26, WHILE=27, COMMENT=28, NEWLINE=29, 
		WS=30, ID=31;
	public const int
		RULE_vk_script = 0, RULE_literal = 1, RULE_list = 2, RULE_pair = 3, RULE_expr = 4, 
		RULE_primitive = 5, RULE_assign = 6, RULE_if_else_statement = 7, RULE_while_statement = 8, 
		RULE_statement = 9, RULE_output = 10;
	public static readonly string[] ruleNames = {
		"vk_script", "literal", "list", "pair", "expr", "primitive", "assign", 
		"if_else_statement", "while_statement", "statement", "output"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "':'", "'.'", "','", "'='", "'=='", "'!='", "'&&'", 
		"'||'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'<='", "'>'", "'>='", 
		"'('", "')'", "'{'", "'}'", "'if'", "'else'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "BOOL", "COLON", "DOT", "COMMA", "ASSIGN", "EQ", 
		"NOTEQ", "AND", "OR", "PLUS", "MINUS", "MUL", "DIV", "MOD", "LESS_THAN", 
		"LESS_EQ_THAN", "GREATER_THAN", "GREATER_EQ_THAN", "LBRACKET", "RBRACKET", 
		"LCBRACKET", "RCBRACKET", "IF", "ELSE", "WHILE", "COMMENT", "NEWLINE", 
		"WS", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VKScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VKScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Vk_scriptContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public Vk_scriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vk_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterVk_script(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitVk_script(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVk_script(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vk_scriptContext vk_script() {
		Vk_scriptContext _localctx = new Vk_scriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_vk_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << BOOL) | (1L << MINUS) | (1L << LBRACKET) | (1L << LCBRACKET) | (1L << IF) | (1L << WHILE) | (1L << NEWLINE) | (1L << ID))) != 0)) {
				{
				State = 24;
				switch (TokenStream.La(1)) {
				case INT:
				case STRING:
				case BOOL:
				case MINUS:
				case LBRACKET:
				case LCBRACKET:
				case IF:
				case WHILE:
				case ID:
					{
					State = 22; statement();
					}
					break;
				case NEWLINE:
					{
					State = 23; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 2, RULE_literal);
		try {
			State = 32;
			switch (TokenStream.La(1)) {
			case INT:
			case STRING:
			case BOOL:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; primitive();
				}
				break;
			case LCBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30; list();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 31; pair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ITerminalNode LCBRACKET() { return GetToken(VKScriptParser.LCBRACKET, 0); }
		public ITerminalNode RCBRACKET() { return GetToken(VKScriptParser.RCBRACKET, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VKScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VKScriptParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 4, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(LCBRACKET);
			State = 43;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << BOOL) | (1L << MINUS) | (1L << LBRACKET) | (1L << LCBRACKET) | (1L << ID))) != 0)) {
				{
				State = 35; expr(0);
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 36; Match(COMMA);
					State = 37; expr(0);
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 45; Match(RCBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(VKScriptParser.COLON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(ID);
			State = 48; Match(COLON);
			State = 49; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPairContext : ExprContext {
		public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		public ExprPairContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPair(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBracketsContext : ExprContext {
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ExprBracketsContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprBrackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorGreaterThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(VKScriptParser.GREATER_THAN, 0); }
		public ExprOperatorGreaterThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorGreaterThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorGreaterThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorGreaterThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorPlusContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VKScriptParser.PLUS, 0); }
		public ExprOperatorPlusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorDivContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VKScriptParser.DIV, 0); }
		public ExprOperatorDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorMinusContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VKScriptParser.MINUS, 0); }
		public ExprOperatorMinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorNotEqContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode NOTEQ() { return GetToken(VKScriptParser.NOTEQ, 0); }
		public ExprOperatorNotEqContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorNotEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorNotEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorNotEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralContext : ExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExprLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(VKScriptParser.OR, 0); }
		public ExprOperatorOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprFuncCallContext : ExprContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ExprFuncCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorAndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VKScriptParser.AND, 0); }
		public ExprOperatorAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorEqContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VKScriptParser.EQ, 0); }
		public ExprOperatorEqContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIdContext : ExprContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ExprIdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorModContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VKScriptParser.MOD, 0); }
		public ExprOperatorModContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMethodCallContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(VKScriptParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ExprMethodCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorLessThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LESS_THAN() { return GetToken(VKScriptParser.LESS_THAN, 0); }
		public ExprOperatorLessThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorLessThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorLessThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorLessThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorLessEqThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LESS_EQ_THAN() { return GetToken(VKScriptParser.LESS_EQ_THAN, 0); }
		public ExprOperatorLessEqThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorLessEqThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorLessEqThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorLessEqThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorMulContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(VKScriptParser.MUL, 0); }
		public ExprOperatorMulContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorGreaterEqThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GREATER_EQ_THAN() { return GetToken(VKScriptParser.GREATER_EQ_THAN, 0); }
		public ExprOperatorGreaterEqThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorGreaterEqThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorGreaterEqThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorGreaterEqThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new ExprFuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 52; Match(ID);
				State = 53; Match(LBRACKET);
				State = 55;
				_la = TokenStream.La(1);
				if (_la==LCBRACKET) {
					{
					State = 54; list();
					}
				}

				State = 57; Match(RBRACKET);
				}
				break;
			case 2:
				{
				_localctx = new ExprPairContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58; pair();
				}
				break;
			case 3:
				{
				_localctx = new ExprIdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59; Match(ID);
				}
				break;
			case 4:
				{
				_localctx = new ExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 60; literal();
				}
				break;
			case 5:
				{
				_localctx = new ExprBracketsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; Match(LBRACKET);
				State = 62; expr(0);
				State = 63; Match(RBRACKET);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 114;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExprOperatorModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 67;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 68; Match(MOD);
						State = 69; expr(15);
						}
						break;
					case 2:
						{
						_localctx = new ExprOperatorMulContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 71; Match(MUL);
						State = 72; expr(14);
						}
						break;
					case 3:
						{
						_localctx = new ExprOperatorDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 74; Match(DIV);
						State = 75; expr(13);
						}
						break;
					case 4:
						{
						_localctx = new ExprOperatorPlusContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 76;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 77; Match(PLUS);
						State = 78; expr(12);
						}
						break;
					case 5:
						{
						_localctx = new ExprOperatorMinusContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 79;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 80; Match(MINUS);
						State = 81; expr(11);
						}
						break;
					case 6:
						{
						_localctx = new ExprOperatorEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 82;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 83; Match(EQ);
						State = 84; expr(10);
						}
						break;
					case 7:
						{
						_localctx = new ExprOperatorNotEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 85;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 86; Match(NOTEQ);
						State = 87; expr(9);
						}
						break;
					case 8:
						{
						_localctx = new ExprOperatorLessThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 88;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 89; Match(LESS_THAN);
						State = 90; expr(8);
						}
						break;
					case 9:
						{
						_localctx = new ExprOperatorLessEqThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 91;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 92; Match(LESS_EQ_THAN);
						State = 93; expr(7);
						}
						break;
					case 10:
						{
						_localctx = new ExprOperatorGreaterThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 94;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 95; Match(GREATER_THAN);
						State = 96; expr(6);
						}
						break;
					case 11:
						{
						_localctx = new ExprOperatorGreaterEqThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 97;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 98; Match(GREATER_EQ_THAN);
						State = 99; expr(5);
						}
						break;
					case 12:
						{
						_localctx = new ExprOperatorAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 100;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 101; Match(AND);
						State = 102; expr(4);
						}
						break;
					case 13:
						{
						_localctx = new ExprOperatorOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 103;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 104; Match(OR);
						State = 105; expr(3);
						}
						break;
					case 14:
						{
						_localctx = new ExprMethodCallContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 106;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 107; Match(DOT);
						State = 108; Match(ID);
						State = 109; Match(LBRACKET);
						State = 111;
						_la = TokenStream.La(1);
						if (_la==LCBRACKET) {
							{
							State = 110; list();
							}
						}

						State = 113; Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(VKScriptParser.INT, 0); }
		public ITerminalNode MINUS() { return GetToken(VKScriptParser.MINUS, 0); }
		public ITerminalNode STRING() { return GetToken(VKScriptParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(VKScriptParser.BOOL, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_primitive);
		int _la;
		try {
			State = 125;
			switch (TokenStream.La(1)) {
			case INT:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				_la = TokenStream.La(1);
				if (_la==MINUS) {
					{
					State = 119; Match(MINUS);
					}
				}

				State = 122; Match(INT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; Match(STRING);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(VKScriptParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 12, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(ID);
			State = 128; Match(ASSIGN);
			State = 129; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_else_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VKScriptParser.IF, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ITerminalNode[] LCBRACKET() { return GetTokens(VKScriptParser.LCBRACKET); }
		public ITerminalNode LCBRACKET(int i) {
			return GetToken(VKScriptParser.LCBRACKET, i);
		}
		public Vk_scriptContext[] vk_script() {
			return GetRuleContexts<Vk_scriptContext>();
		}
		public Vk_scriptContext vk_script(int i) {
			return GetRuleContext<Vk_scriptContext>(i);
		}
		public ITerminalNode[] RCBRACKET() { return GetTokens(VKScriptParser.RCBRACKET); }
		public ITerminalNode RCBRACKET(int i) {
			return GetToken(VKScriptParser.RCBRACKET, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public ITerminalNode ELSE() { return GetToken(VKScriptParser.ELSE, 0); }
		public If_else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterIf_else_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitIf_else_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_else_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_else_statementContext if_else_statement() {
		If_else_statementContext _localctx = new If_else_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_else_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(IF);
			State = 132; Match(LBRACKET);
			State = 133; expr(0);
			State = 134; Match(RBRACKET);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 135; Match(NEWLINE);
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 141; Match(LCBRACKET);
			State = 142; vk_script();
			State = 143; Match(RCBRACKET);
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 144; Match(NEWLINE);
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 150; Match(ELSE);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 151; Match(NEWLINE);
					}
					}
					State = 156;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 157; Match(LCBRACKET);
				State = 158; vk_script();
				State = 159; Match(RCBRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VKScriptParser.WHILE, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ITerminalNode LCBRACKET() { return GetToken(VKScriptParser.LCBRACKET, 0); }
		public Vk_scriptContext vk_script() {
			return GetRuleContext<Vk_scriptContext>(0);
		}
		public ITerminalNode RCBRACKET() { return GetToken(VKScriptParser.RCBRACKET, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(WHILE);
			State = 164; Match(LBRACKET);
			State = 165; expr(0);
			State = 166; Match(RBRACKET);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 167; Match(NEWLINE);
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 173; Match(LCBRACKET);
			State = 174; vk_script();
			State = 175; Match(RCBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public If_else_statementContext if_else_statement() {
			return GetRuleContext<If_else_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177; assign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; output();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179; if_else_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 180; while_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 20, RULE_output);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 19);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3!\xBC");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2");
		sb.Append("\a\x2\x1B\n\x2\f\x2\xE\x2\x1E\v\x2\x3\x3\x3\x3\x3\x3\x5\x3#");
		sb.Append("\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4)\n\x4\f\x4\xE\x4,\v\x4\x5");
		sb.Append("\x4.\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x5\x6:\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x5\x6\x44\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6r\n\x6");
		sb.Append("\x3\x6\a\x6u\n\x6\f\x6\xE\x6x\v\x6\x3\a\x5\a{\n\a\x3\a\x3\a");
		sb.Append("\x3\a\x5\a\x80\n\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3");
		sb.Append("\t\a\t\x8B\n\t\f\t\xE\t\x8E\v\t\x3\t\x3\t\x3\t\x3\t\a\t\x94");
		sb.Append("\n\t\f\t\xE\t\x97\v\t\x3\t\x3\t\a\t\x9B\n\t\f\t\xE\t\x9E\v\t");
		sb.Append("\x3\t\x3\t\x3\t\x3\t\x5\t\xA4\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\a");
		sb.Append("\n\xAB\n\n\f\n\xE\n\xAE\v\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x5\v\xB8\n\v\x3\f\x3\f\x3\f\x2\x3\n\r\x2\x4\x6\b\n\f");
		sb.Append("\xE\x10\x12\x14\x16\x2\x2\xD5\x2\x1C\x3\x2\x2\x2\x4\"\x3\x2");
		sb.Append("\x2\x2\x6$\x3\x2\x2\x2\b\x31\x3\x2\x2\x2\n\x43\x3\x2\x2\x2\f");
		sb.Append("\x7F\x3\x2\x2\x2\xE\x81\x3\x2\x2\x2\x10\x85\x3\x2\x2\x2\x12");
		sb.Append("\xA5\x3\x2\x2\x2\x14\xB7\x3\x2\x2\x2\x16\xB9\x3\x2\x2\x2\x18");
		sb.Append("\x1B\x5\x14\v\x2\x19\x1B\a\x1F\x2\x2\x1A\x18\x3\x2\x2\x2\x1A");
		sb.Append("\x19\x3\x2\x2\x2\x1B\x1E\x3\x2\x2\x2\x1C\x1A\x3\x2\x2\x2\x1C");
		sb.Append("\x1D\x3\x2\x2\x2\x1D\x3\x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2\x1F");
		sb.Append("#\x5\f\a\x2 #\x5\x6\x4\x2!#\x5\b\x5\x2\"\x1F\x3\x2\x2\x2\" ");
		sb.Append("\x3\x2\x2\x2\"!\x3\x2\x2\x2#\x5\x3\x2\x2\x2$-\a\x19\x2\x2%*");
		sb.Append("\x5\n\x6\x2&\'\a\b\x2\x2\')\x5\n\x6\x2(&\x3\x2\x2\x2),\x3\x2");
		sb.Append("\x2\x2*(\x3\x2\x2\x2*+\x3\x2\x2\x2+.\x3\x2\x2\x2,*\x3\x2\x2");
		sb.Append("\x2-%\x3\x2\x2\x2-.\x3\x2\x2\x2./\x3\x2\x2\x2/\x30\a\x1A\x2");
		sb.Append("\x2\x30\a\x3\x2\x2\x2\x31\x32\a!\x2\x2\x32\x33\a\x6\x2\x2\x33");
		sb.Append("\x34\x5\n\x6\x2\x34\t\x3\x2\x2\x2\x35\x36\b\x6\x1\x2\x36\x37");
		sb.Append("\a!\x2\x2\x37\x39\a\x17\x2\x2\x38:\x5\x6\x4\x2\x39\x38\x3\x2");
		sb.Append("\x2\x2\x39:\x3\x2\x2\x2:;\x3\x2\x2\x2;\x44\a\x18\x2\x2<\x44");
		sb.Append("\x5\b\x5\x2=\x44\a!\x2\x2>\x44\x5\x4\x3\x2?@\a\x17\x2\x2@\x41");
		sb.Append("\x5\n\x6\x2\x41\x42\a\x18\x2\x2\x42\x44\x3\x2\x2\x2\x43\x35");
		sb.Append("\x3\x2\x2\x2\x43<\x3\x2\x2\x2\x43=\x3\x2\x2\x2\x43>\x3\x2\x2");
		sb.Append("\x2\x43?\x3\x2\x2\x2\x44v\x3\x2\x2\x2\x45\x46\f\x10\x2\x2\x46");
		sb.Append("G\a\x12\x2\x2Gu\x5\n\x6\x11HI\f\xF\x2\x2IJ\a\x10\x2\x2Ju\x5");
		sb.Append("\n\x6\x10KL\f\xE\x2\x2LM\a\x11\x2\x2Mu\x5\n\x6\xFNO\f\r\x2\x2");
		sb.Append("OP\a\xE\x2\x2Pu\x5\n\x6\xEQR\f\f\x2\x2RS\a\xF\x2\x2Su\x5\n\x6");
		sb.Append("\rTU\f\v\x2\x2UV\a\n\x2\x2Vu\x5\n\x6\fWX\f\n\x2\x2XY\a\v\x2");
		sb.Append("\x2Yu\x5\n\x6\vZ[\f\t\x2\x2[\\\a\x13\x2\x2\\u\x5\n\x6\n]^\f");
		sb.Append("\b\x2\x2^_\a\x14\x2\x2_u\x5\n\x6\t`\x61\f\a\x2\x2\x61\x62\a");
		sb.Append("\x15\x2\x2\x62u\x5\n\x6\b\x63\x64\f\x6\x2\x2\x64\x65\a\x16\x2");
		sb.Append("\x2\x65u\x5\n\x6\a\x66g\f\x5\x2\x2gh\a\f\x2\x2hu\x5\n\x6\x6");
		sb.Append("ij\f\x4\x2\x2jk\a\r\x2\x2ku\x5\n\x6\x5lm\f\x15\x2\x2mn\a\a\x2");
		sb.Append("\x2no\a!\x2\x2oq\a\x17\x2\x2pr\x5\x6\x4\x2qp\x3\x2\x2\x2qr\x3");
		sb.Append("\x2\x2\x2rs\x3\x2\x2\x2su\a\x18\x2\x2t\x45\x3\x2\x2\x2tH\x3");
		sb.Append("\x2\x2\x2tK\x3\x2\x2\x2tN\x3\x2\x2\x2tQ\x3\x2\x2\x2tT\x3\x2");
		sb.Append("\x2\x2tW\x3\x2\x2\x2tZ\x3\x2\x2\x2t]\x3\x2\x2\x2t`\x3\x2\x2");
		sb.Append("\x2t\x63\x3\x2\x2\x2t\x66\x3\x2\x2\x2ti\x3\x2\x2\x2tl\x3\x2");
		sb.Append("\x2\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2w\v\x3\x2\x2");
		sb.Append("\x2xv\x3\x2\x2\x2y{\a\xF\x2\x2zy\x3\x2\x2\x2z{\x3\x2\x2\x2{");
		sb.Append("|\x3\x2\x2\x2|\x80\a\x3\x2\x2}\x80\a\x4\x2\x2~\x80\a\x5\x2\x2");
		sb.Append("\x7Fz\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F~\x3\x2\x2\x2\x80\r\x3");
		sb.Append("\x2\x2\x2\x81\x82\a!\x2\x2\x82\x83\a\t\x2\x2\x83\x84\x5\n\x6");
		sb.Append("\x2\x84\xF\x3\x2\x2\x2\x85\x86\a\x1B\x2\x2\x86\x87\a\x17\x2");
		sb.Append("\x2\x87\x88\x5\n\x6\x2\x88\x8C\a\x18\x2\x2\x89\x8B\a\x1F\x2");
		sb.Append("\x2\x8A\x89\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2");
		sb.Append("\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F\x3\x2\x2\x2\x8E\x8C\x3\x2\x2");
		sb.Append("\x2\x8F\x90\a\x19\x2\x2\x90\x91\x5\x2\x2\x2\x91\xA3\a\x1A\x2");
		sb.Append("\x2\x92\x94\a\x1F\x2\x2\x93\x92\x3\x2\x2\x2\x94\x97\x3\x2\x2");
		sb.Append("\x2\x95\x93\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x98\x3\x2\x2");
		sb.Append("\x2\x97\x95\x3\x2\x2\x2\x98\x9C\a\x1C\x2\x2\x99\x9B\a\x1F\x2");
		sb.Append("\x2\x9A\x99\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2");
		sb.Append("\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9F\x3\x2\x2\x2\x9E\x9C\x3\x2\x2");
		sb.Append("\x2\x9F\xA0\a\x19\x2\x2\xA0\xA1\x5\x2\x2\x2\xA1\xA2\a\x1A\x2");
		sb.Append("\x2\xA2\xA4\x3\x2\x2\x2\xA3\x95\x3\x2\x2\x2\xA3\xA4\x3\x2\x2");
		sb.Append("\x2\xA4\x11\x3\x2\x2\x2\xA5\xA6\a\x1D\x2\x2\xA6\xA7\a\x17\x2");
		sb.Append("\x2\xA7\xA8\x5\n\x6\x2\xA8\xAC\a\x18\x2\x2\xA9\xAB\a\x1F\x2");
		sb.Append("\x2\xAA\xA9\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2");
		sb.Append("\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAF\x3\x2\x2\x2\xAE\xAC\x3\x2\x2");
		sb.Append("\x2\xAF\xB0\a\x19\x2\x2\xB0\xB1\x5\x2\x2\x2\xB1\xB2\a\x1A\x2");
		sb.Append("\x2\xB2\x13\x3\x2\x2\x2\xB3\xB8\x5\xE\b\x2\xB4\xB8\x5\x16\f");
		sb.Append("\x2\xB5\xB8\x5\x10\t\x2\xB6\xB8\x5\x12\n\x2\xB7\xB3\x3\x2\x2");
		sb.Append("\x2\xB7\xB4\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB6\x3\x2\x2");
		sb.Append("\x2\xB8\x15\x3\x2\x2\x2\xB9\xBA\x5\n\x6\x2\xBA\x17\x3\x2\x2");
		sb.Append("\x2\x14\x1A\x1C\"*-\x39\x43qtvz\x7F\x8C\x95\x9C\xA3\xAC\xB7");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
