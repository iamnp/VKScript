//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from VKScript.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class VKScriptParser : Parser {
	public const int
		INT=1, STRING=2, BOOL=3, COLON=4, DOT=5, COMMA=6, ASSIGN=7, EQ=8, NOTEQ=9, 
		AND=10, OR=11, PLUS=12, MINUS=13, MUL=14, DIV=15, MOD=16, LESS_THAN=17, 
		LESS_EQ_THAN=18, GREATER_THAN=19, GREATER_EQ_THAN=20, LBRACKET=21, RBRACKET=22, 
		LCBRACKET=23, RCBRACKET=24, IF=25, ELSE=26, WHILE=27, COMMENT=28, NEWLINE=29, 
		WS=30, ID=31;
	public const int
		RULE_vk_script = 0, RULE_literal = 1, RULE_list = 2, RULE_list_content = 3, 
		RULE_pair = 4, RULE_expr = 5, RULE_primitive = 6, RULE_assign = 7, RULE_if_else_statement = 8, 
		RULE_while_statement = 9, RULE_statement = 10, RULE_output = 11;
	public static readonly string[] ruleNames = {
		"vk_script", "literal", "list", "list_content", "pair", "expr", "primitive", 
		"assign", "if_else_statement", "while_statement", "statement", "output"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "':'", "'.'", "','", "'='", "'=='", "'!='", "'&&'", 
		"'||'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'<='", "'>'", "'>='", 
		"'('", "')'", "'{'", "'}'", "'if'", "'else'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "BOOL", "COLON", "DOT", "COMMA", "ASSIGN", "EQ", 
		"NOTEQ", "AND", "OR", "PLUS", "MINUS", "MUL", "DIV", "MOD", "LESS_THAN", 
		"LESS_EQ_THAN", "GREATER_THAN", "GREATER_EQ_THAN", "LBRACKET", "RBRACKET", 
		"LCBRACKET", "RCBRACKET", "IF", "ELSE", "WHILE", "COMMENT", "NEWLINE", 
		"WS", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VKScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VKScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Vk_scriptContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public Vk_scriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vk_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterVk_script(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitVk_script(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVk_script(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vk_scriptContext vk_script() {
		Vk_scriptContext _localctx = new Vk_scriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_vk_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << BOOL) | (1L << MINUS) | (1L << LBRACKET) | (1L << LCBRACKET) | (1L << IF) | (1L << WHILE) | (1L << NEWLINE) | (1L << ID))) != 0)) {
				{
				State = 26;
				switch (TokenStream.La(1)) {
				case INT:
				case STRING:
				case BOOL:
				case MINUS:
				case LBRACKET:
				case LCBRACKET:
				case IF:
				case WHILE:
				case ID:
					{
					State = 24; statement();
					}
					break;
				case NEWLINE:
					{
					State = 25; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 2, RULE_literal);
		try {
			State = 34;
			switch (TokenStream.La(1)) {
			case INT:
			case STRING:
			case BOOL:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; primitive();
				}
				break;
			case LCBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; list();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 33; pair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ITerminalNode LCBRACKET() { return GetToken(VKScriptParser.LCBRACKET, 0); }
		public ITerminalNode RCBRACKET() { return GetToken(VKScriptParser.RCBRACKET, 0); }
		public List_contentContext list_content() {
			return GetRuleContext<List_contentContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 4, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(LCBRACKET);
			State = 38;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << BOOL) | (1L << MINUS) | (1L << LBRACKET) | (1L << LCBRACKET) | (1L << ID))) != 0)) {
				{
				State = 37; list_content();
				}
			}

			State = 40; Match(RCBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_contentContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VKScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VKScriptParser.COMMA, i);
		}
		public List_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterList_content(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitList_content(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_contentContext list_content() {
		List_contentContext _localctx = new List_contentContext(Context, State);
		EnterRule(_localctx, 6, RULE_list_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; expr(0);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 43; Match(COMMA);
				State = 44; expr(0);
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(VKScriptParser.COLON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 8, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(ID);
			State = 51; Match(COLON);
			State = 52; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPairContext : ExprContext {
		public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		public ExprPairContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPair(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBracketsContext : ExprContext {
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ExprBracketsContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprBrackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorGreaterThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(VKScriptParser.GREATER_THAN, 0); }
		public ExprOperatorGreaterThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorGreaterThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorGreaterThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorGreaterThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorPlusContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VKScriptParser.PLUS, 0); }
		public ExprOperatorPlusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorDivContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VKScriptParser.DIV, 0); }
		public ExprOperatorDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorMinusContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VKScriptParser.MINUS, 0); }
		public ExprOperatorMinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorNotEqContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode NOTEQ() { return GetToken(VKScriptParser.NOTEQ, 0); }
		public ExprOperatorNotEqContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorNotEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorNotEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorNotEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLiteralContext : ExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExprLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(VKScriptParser.OR, 0); }
		public ExprOperatorOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprFuncCallContext : ExprContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public List_contentContext list_content() {
			return GetRuleContext<List_contentContext>(0);
		}
		public ExprFuncCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorAndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VKScriptParser.AND, 0); }
		public ExprOperatorAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorEqContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VKScriptParser.EQ, 0); }
		public ExprOperatorEqContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIdContext : ExprContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ExprIdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorModContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VKScriptParser.MOD, 0); }
		public ExprOperatorModContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMethodCallContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(VKScriptParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public List_contentContext list_content() {
			return GetRuleContext<List_contentContext>(0);
		}
		public ExprMethodCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorLessThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LESS_THAN() { return GetToken(VKScriptParser.LESS_THAN, 0); }
		public ExprOperatorLessThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorLessThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorLessThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorLessThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorLessEqThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LESS_EQ_THAN() { return GetToken(VKScriptParser.LESS_EQ_THAN, 0); }
		public ExprOperatorLessEqThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorLessEqThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorLessEqThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorLessEqThen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorMulContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(VKScriptParser.MUL, 0); }
		public ExprOperatorMulContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOperatorGreaterEqThenContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GREATER_EQ_THAN() { return GetToken(VKScriptParser.GREATER_EQ_THAN, 0); }
		public ExprOperatorGreaterEqThenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterExprOperatorGreaterEqThen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitExprOperatorGreaterEqThen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOperatorGreaterEqThen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new ExprFuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 55; Match(ID);
				State = 56; Match(LBRACKET);
				State = 58;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << BOOL) | (1L << MINUS) | (1L << LBRACKET) | (1L << LCBRACKET) | (1L << ID))) != 0)) {
					{
					State = 57; list_content();
					}
				}

				State = 60; Match(RBRACKET);
				}
				break;
			case 2:
				{
				_localctx = new ExprPairContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; pair();
				}
				break;
			case 3:
				{
				_localctx = new ExprIdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62; Match(ID);
				}
				break;
			case 4:
				{
				_localctx = new ExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 63; literal();
				}
				break;
			case 5:
				{
				_localctx = new ExprBracketsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64; Match(LBRACKET);
				State = 65; expr(0);
				State = 66; Match(RBRACKET);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 117;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExprOperatorModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 71; Match(MOD);
						State = 72; expr(15);
						}
						break;
					case 2:
						{
						_localctx = new ExprOperatorMulContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 74; Match(MUL);
						State = 75; expr(14);
						}
						break;
					case 3:
						{
						_localctx = new ExprOperatorDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 76;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 77; Match(DIV);
						State = 78; expr(13);
						}
						break;
					case 4:
						{
						_localctx = new ExprOperatorPlusContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 79;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 80; Match(PLUS);
						State = 81; expr(12);
						}
						break;
					case 5:
						{
						_localctx = new ExprOperatorMinusContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 82;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 83; Match(MINUS);
						State = 84; expr(11);
						}
						break;
					case 6:
						{
						_localctx = new ExprOperatorEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 85;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 86; Match(EQ);
						State = 87; expr(10);
						}
						break;
					case 7:
						{
						_localctx = new ExprOperatorNotEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 88;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 89; Match(NOTEQ);
						State = 90; expr(9);
						}
						break;
					case 8:
						{
						_localctx = new ExprOperatorLessThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 91;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 92; Match(LESS_THAN);
						State = 93; expr(8);
						}
						break;
					case 9:
						{
						_localctx = new ExprOperatorLessEqThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 94;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 95; Match(LESS_EQ_THAN);
						State = 96; expr(7);
						}
						break;
					case 10:
						{
						_localctx = new ExprOperatorGreaterThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 97;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 98; Match(GREATER_THAN);
						State = 99; expr(6);
						}
						break;
					case 11:
						{
						_localctx = new ExprOperatorGreaterEqThenContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 100;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 101; Match(GREATER_EQ_THAN);
						State = 102; expr(5);
						}
						break;
					case 12:
						{
						_localctx = new ExprOperatorAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 103;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 104; Match(AND);
						State = 105; expr(4);
						}
						break;
					case 13:
						{
						_localctx = new ExprOperatorOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 106;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 107; Match(OR);
						State = 108; expr(3);
						}
						break;
					case 14:
						{
						_localctx = new ExprMethodCallContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 109;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 110; Match(DOT);
						State = 111; Match(ID);
						State = 112; Match(LBRACKET);
						State = 114;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << BOOL) | (1L << MINUS) | (1L << LBRACKET) | (1L << LCBRACKET) | (1L << ID))) != 0)) {
							{
							State = 113; list_content();
							}
						}

						State = 116; Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(VKScriptParser.INT, 0); }
		public ITerminalNode MINUS() { return GetToken(VKScriptParser.MINUS, 0); }
		public ITerminalNode STRING() { return GetToken(VKScriptParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(VKScriptParser.BOOL, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_primitive);
		int _la;
		try {
			State = 128;
			switch (TokenStream.La(1)) {
			case INT:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				_la = TokenStream.La(1);
				if (_la==MINUS) {
					{
					State = 122; Match(MINUS);
					}
				}

				State = 125; Match(INT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; Match(STRING);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(VKScriptParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(VKScriptParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 14, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(ID);
			State = 131; Match(ASSIGN);
			State = 132; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_else_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VKScriptParser.IF, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ITerminalNode[] LCBRACKET() { return GetTokens(VKScriptParser.LCBRACKET); }
		public ITerminalNode LCBRACKET(int i) {
			return GetToken(VKScriptParser.LCBRACKET, i);
		}
		public Vk_scriptContext[] vk_script() {
			return GetRuleContexts<Vk_scriptContext>();
		}
		public Vk_scriptContext vk_script(int i) {
			return GetRuleContext<Vk_scriptContext>(i);
		}
		public ITerminalNode[] RCBRACKET() { return GetTokens(VKScriptParser.RCBRACKET); }
		public ITerminalNode RCBRACKET(int i) {
			return GetToken(VKScriptParser.RCBRACKET, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public ITerminalNode ELSE() { return GetToken(VKScriptParser.ELSE, 0); }
		public If_else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_else_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterIf_else_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitIf_else_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_else_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_else_statementContext if_else_statement() {
		If_else_statementContext _localctx = new If_else_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_if_else_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(IF);
			State = 135; Match(LBRACKET);
			State = 136; expr(0);
			State = 137; Match(RBRACKET);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 138; Match(NEWLINE);
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 144; Match(LCBRACKET);
			State = 145; vk_script();
			State = 146; Match(RCBRACKET);
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 147; Match(NEWLINE);
					}
					}
					State = 152;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 153; Match(ELSE);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 154; Match(NEWLINE);
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 160; Match(LCBRACKET);
				State = 161; vk_script();
				State = 162; Match(RCBRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VKScriptParser.WHILE, 0); }
		public ITerminalNode LBRACKET() { return GetToken(VKScriptParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(VKScriptParser.RBRACKET, 0); }
		public ITerminalNode LCBRACKET() { return GetToken(VKScriptParser.LCBRACKET, 0); }
		public Vk_scriptContext vk_script() {
			return GetRuleContext<Vk_scriptContext>(0);
		}
		public ITerminalNode RCBRACKET() { return GetToken(VKScriptParser.RCBRACKET, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VKScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VKScriptParser.NEWLINE, i);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(WHILE);
			State = 167; Match(LBRACKET);
			State = 168; expr(0);
			State = 169; Match(RBRACKET);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 170; Match(NEWLINE);
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 176; Match(LCBRACKET);
			State = 177; vk_script();
			State = 178; Match(RCBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public If_else_statementContext if_else_statement() {
			return GetRuleContext<If_else_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; assign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181; output();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182; if_else_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183; while_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVKScriptListener typedListener = listener as IVKScriptListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVKScriptVisitor<TResult> typedVisitor = visitor as IVKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 22, RULE_output);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 19);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3!\xBF");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3");
		sb.Append("\x2\x3\x2\a\x2\x1D\n\x2\f\x2\xE\x2 \v\x2\x3\x3\x3\x3\x3\x3\x5");
		sb.Append("\x3%\n\x3\x3\x4\x3\x4\x5\x4)\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3");
		sb.Append("\x5\a\x5\x30\n\x5\f\x5\xE\x5\x33\v\x5\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x5\a=\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\x5\aG\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a");
		sb.Append("\x5\au\n\a\x3\a\a\ax\n\a\f\a\xE\a{\v\a\x3\b\x5\b~\n\b\x3\b\x3");
		sb.Append("\b\x3\b\x5\b\x83\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\a\n\x8E\n\n\f\n\xE\n\x91\v\n\x3\n\x3\n\x3\n\x3\n\a\n\x97");
		sb.Append("\n\n\f\n\xE\n\x9A\v\n\x3\n\x3\n\a\n\x9E\n\n\f\n\xE\n\xA1\v\n");
		sb.Append("\x3\n\x3\n\x3\n\x3\n\x5\n\xA7\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\a");
		sb.Append("\v\xAE\n\v\f\v\xE\v\xB1\v\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3");
		sb.Append("\f\x3\f\x5\f\xBB\n\f\x3\r\x3\r\x3\r\x2\x3\f\xE\x2\x4\x6\b\n");
		sb.Append("\f\xE\x10\x12\x14\x16\x18\x2\x2\xD7\x2\x1E\x3\x2\x2\x2\x4$\x3");
		sb.Append("\x2\x2\x2\x6&\x3\x2\x2\x2\b,\x3\x2\x2\x2\n\x34\x3\x2\x2\x2\f");
		sb.Append("\x46\x3\x2\x2\x2\xE\x82\x3\x2\x2\x2\x10\x84\x3\x2\x2\x2\x12");
		sb.Append("\x88\x3\x2\x2\x2\x14\xA8\x3\x2\x2\x2\x16\xBA\x3\x2\x2\x2\x18");
		sb.Append("\xBC\x3\x2\x2\x2\x1A\x1D\x5\x16\f\x2\x1B\x1D\a\x1F\x2\x2\x1C");
		sb.Append("\x1A\x3\x2\x2\x2\x1C\x1B\x3\x2\x2\x2\x1D \x3\x2\x2\x2\x1E\x1C");
		sb.Append("\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F\x3\x3\x2\x2\x2 \x1E\x3");
		sb.Append("\x2\x2\x2!%\x5\xE\b\x2\"%\x5\x6\x4\x2#%\x5\n\x6\x2$!\x3\x2\x2");
		sb.Append("\x2$\"\x3\x2\x2\x2$#\x3\x2\x2\x2%\x5\x3\x2\x2\x2&(\a\x19\x2");
		sb.Append("\x2\')\x5\b\x5\x2(\'\x3\x2\x2\x2()\x3\x2\x2\x2)*\x3\x2\x2\x2");
		sb.Append("*+\a\x1A\x2\x2+\a\x3\x2\x2\x2,\x31\x5\f\a\x2-.\a\b\x2\x2.\x30");
		sb.Append("\x5\f\a\x2/-\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2");
		sb.Append("\x31\x32\x3\x2\x2\x2\x32\t\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34");
		sb.Append("\x35\a!\x2\x2\x35\x36\a\x6\x2\x2\x36\x37\x5\f\a\x2\x37\v\x3");
		sb.Append("\x2\x2\x2\x38\x39\b\a\x1\x2\x39:\a!\x2\x2:<\a\x17\x2\x2;=\x5");
		sb.Append("\b\x5\x2<;\x3\x2\x2\x2<=\x3\x2\x2\x2=>\x3\x2\x2\x2>G\a\x18\x2");
		sb.Append("\x2?G\x5\n\x6\x2@G\a!\x2\x2\x41G\x5\x4\x3\x2\x42\x43\a\x17\x2");
		sb.Append("\x2\x43\x44\x5\f\a\x2\x44\x45\a\x18\x2\x2\x45G\x3\x2\x2\x2\x46");
		sb.Append("\x38\x3\x2\x2\x2\x46?\x3\x2\x2\x2\x46@\x3\x2\x2\x2\x46\x41\x3");
		sb.Append("\x2\x2\x2\x46\x42\x3\x2\x2\x2Gy\x3\x2\x2\x2HI\f\x10\x2\x2IJ");
		sb.Append("\a\x12\x2\x2Jx\x5\f\a\x11KL\f\xF\x2\x2LM\a\x10\x2\x2Mx\x5\f");
		sb.Append("\a\x10NO\f\xE\x2\x2OP\a\x11\x2\x2Px\x5\f\a\xFQR\f\r\x2\x2RS");
		sb.Append("\a\xE\x2\x2Sx\x5\f\a\xETU\f\f\x2\x2UV\a\xF\x2\x2Vx\x5\f\a\r");
		sb.Append("WX\f\v\x2\x2XY\a\n\x2\x2Yx\x5\f\a\fZ[\f\n\x2\x2[\\\a\v\x2\x2");
		sb.Append("\\x\x5\f\a\v]^\f\t\x2\x2^_\a\x13\x2\x2_x\x5\f\a\n`\x61\f\b\x2");
		sb.Append("\x2\x61\x62\a\x14\x2\x2\x62x\x5\f\a\t\x63\x64\f\a\x2\x2\x64");
		sb.Append("\x65\a\x15\x2\x2\x65x\x5\f\a\b\x66g\f\x6\x2\x2gh\a\x16\x2\x2");
		sb.Append("hx\x5\f\a\aij\f\x5\x2\x2jk\a\f\x2\x2kx\x5\f\a\x6lm\f\x4\x2\x2");
		sb.Append("mn\a\r\x2\x2nx\x5\f\a\x5op\f\x15\x2\x2pq\a\a\x2\x2qr\a!\x2\x2");
		sb.Append("rt\a\x17\x2\x2su\x5\b\x5\x2ts\x3\x2\x2\x2tu\x3\x2\x2\x2uv\x3");
		sb.Append("\x2\x2\x2vx\a\x18\x2\x2wH\x3\x2\x2\x2wK\x3\x2\x2\x2wN\x3\x2");
		sb.Append("\x2\x2wQ\x3\x2\x2\x2wT\x3\x2\x2\x2wW\x3\x2\x2\x2wZ\x3\x2\x2");
		sb.Append("\x2w]\x3\x2\x2\x2w`\x3\x2\x2\x2w\x63\x3\x2\x2\x2w\x66\x3\x2");
		sb.Append("\x2\x2wi\x3\x2\x2\x2wl\x3\x2\x2\x2wo\x3\x2\x2\x2x{\x3\x2\x2");
		sb.Append("\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z\r\x3\x2\x2\x2{y\x3\x2\x2\x2");
		sb.Append("|~\a\xF\x2\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F");
		sb.Append("\x83\a\x3\x2\x2\x80\x83\a\x4\x2\x2\x81\x83\a\x5\x2\x2\x82}\x3");
		sb.Append("\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x81\x3\x2\x2\x2\x83\xF\x3");
		sb.Append("\x2\x2\x2\x84\x85\a!\x2\x2\x85\x86\a\t\x2\x2\x86\x87\x5\f\a");
		sb.Append("\x2\x87\x11\x3\x2\x2\x2\x88\x89\a\x1B\x2\x2\x89\x8A\a\x17\x2");
		sb.Append("\x2\x8A\x8B\x5\f\a\x2\x8B\x8F\a\x18\x2\x2\x8C\x8E\a\x1F\x2\x2");
		sb.Append("\x8D\x8C\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2");
		sb.Append("\x8F\x90\x3\x2\x2\x2\x90\x92\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2");
		sb.Append("\x92\x93\a\x19\x2\x2\x93\x94\x5\x2\x2\x2\x94\xA6\a\x1A\x2\x2");
		sb.Append("\x95\x97\a\x1F\x2\x2\x96\x95\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2");
		sb.Append("\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9B\x3\x2\x2\x2");
		sb.Append("\x9A\x98\x3\x2\x2\x2\x9B\x9F\a\x1C\x2\x2\x9C\x9E\a\x1F\x2\x2");
		sb.Append("\x9D\x9C\x3\x2\x2\x2\x9E\xA1\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2");
		sb.Append("\x9F\xA0\x3\x2\x2\x2\xA0\xA2\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2");
		sb.Append("\xA2\xA3\a\x19\x2\x2\xA3\xA4\x5\x2\x2\x2\xA4\xA5\a\x1A\x2\x2");
		sb.Append("\xA5\xA7\x3\x2\x2\x2\xA6\x98\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2");
		sb.Append("\xA7\x13\x3\x2\x2\x2\xA8\xA9\a\x1D\x2\x2\xA9\xAA\a\x17\x2\x2");
		sb.Append("\xAA\xAB\x5\f\a\x2\xAB\xAF\a\x18\x2\x2\xAC\xAE\a\x1F\x2\x2\xAD");
		sb.Append("\xAC\x3\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF");
		sb.Append("\xB0\x3\x2\x2\x2\xB0\xB2\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2");
		sb.Append("\xB3\a\x19\x2\x2\xB3\xB4\x5\x2\x2\x2\xB4\xB5\a\x1A\x2\x2\xB5");
		sb.Append("\x15\x3\x2\x2\x2\xB6\xBB\x5\x10\t\x2\xB7\xBB\x5\x18\r\x2\xB8");
		sb.Append("\xBB\x5\x12\n\x2\xB9\xBB\x5\x14\v\x2\xBA\xB6\x3\x2\x2\x2\xBA");
		sb.Append("\xB7\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xB9\x3\x2\x2\x2\xBB");
		sb.Append("\x17\x3\x2\x2\x2\xBC\xBD\x5\f\a\x2\xBD\x19\x3\x2\x2\x2\x14\x1C");
		sb.Append("\x1E$(\x31<\x46twy}\x82\x8F\x98\x9F\xA6\xAF\xBA");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
