//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from VKScript.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class VKScriptLexer : Lexer {
	public const int
		INT=1, STRING=2, BOOL=3, COLON=4, DOT=5, COMMA=6, ASSIGN=7, EQ=8, NOTEQ=9, 
		AND=10, OR=11, PLUS=12, MINUS=13, MUL=14, DIV=15, MOD=16, LESS_THAN=17, 
		LESS_EQ_THAN=18, LARGER_THAN=19, LARGER_EQ_THAN=20, LBRACKET=21, RBRACKET=22, 
		LCBRACKET=23, RCBRACKET=24, IF=25, ELSE=26, WHILE=27, COMMENT=28, NEWLINE=29, 
		WS=30, ID=31;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "STRING", "BOOL", "COLON", "DOT", "COMMA", "ASSIGN", "EQ", "NOTEQ", 
		"AND", "OR", "PLUS", "MINUS", "MUL", "DIV", "MOD", "LESS_THAN", "LESS_EQ_THAN", 
		"LARGER_THAN", "LARGER_EQ_THAN", "LBRACKET", "RBRACKET", "LCBRACKET", 
		"RCBRACKET", "IF", "ELSE", "WHILE", "COMMENT", "NEWLINE", "WS", "ID"
	};


	public VKScriptLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "':'", "'.'", "','", "'='", "'=='", "'!='", "'&&'", 
		"'||'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'<='", "'>'", "'>='", 
		"'('", "')'", "'{'", "'}'", "'if'", "'else'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "BOOL", "COLON", "DOT", "COMMA", "ASSIGN", "EQ", 
		"NOTEQ", "AND", "OR", "PLUS", "MINUS", "MUL", "DIV", "MOD", "LESS_THAN", 
		"LESS_EQ_THAN", "LARGER_THAN", "LARGER_EQ_THAN", "LBRACKET", "RBRACKET", 
		"LCBRACKET", "RCBRACKET", "IF", "ELSE", "WHILE", "COMMENT", "NEWLINE", 
		"WS", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VKScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2!\xBA");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x3\x2\x6\x2\x43\n\x2\r\x2\xE\x2\x44\x3\x3\x3\x3\a\x3I\n\x3");
		sb.Append("\f\x3\xE\x3L\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4Y\n\x4\x3\x5\x3\x5\x3\x6\x3\x6");
		sb.Append("\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v");
		sb.Append("\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10");
		sb.Append("\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3");
		sb.Append("\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17");
		sb.Append("\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x9D\n\x1D\f\x1D\xE");
		sb.Append("\x1D\xA0\v\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x5\x1E\xAB\n\x1E\x3\x1F\x6\x1F\xAE\n\x1F");
		sb.Append("\r\x1F\xE\x1F\xAF\x3\x1F\x3\x1F\x3 \x3 \a \xB6\n \f \xE \xB9");
		sb.Append("\v \x4J\x9E\x2!\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13");
		sb.Append("\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14");
		sb.Append("\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39");
		sb.Append("\x1E;\x1F= ?!\x3\x2\a\x3\x2\x32;\x4\x2\f\f\xF\xF\x5\x2\v\f\xF");
		sb.Append("\xF\"\"\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63");
		sb.Append("|\xC1\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2");
		sb.Append("\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2");
		sb.Append("\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3");
		sb.Append("\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2");
		sb.Append("+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2");
		sb.Append("\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2");
		sb.Append("\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2");
		sb.Append("\x2\x2\x3\x42\x3\x2\x2\x2\x5\x46\x3\x2\x2\x2\aX\x3\x2\x2\x2");
		sb.Append("\tZ\x3\x2\x2\x2\v\\\x3\x2\x2\x2\r^\x3\x2\x2\x2\xF`\x3\x2\x2");
		sb.Append("\x2\x11\x62\x3\x2\x2\x2\x13\x65\x3\x2\x2\x2\x15h\x3\x2\x2\x2");
		sb.Append("\x17k\x3\x2\x2\x2\x19n\x3\x2\x2\x2\x1Bp\x3\x2\x2\x2\x1Dr\x3");
		sb.Append("\x2\x2\x2\x1Ft\x3\x2\x2\x2!v\x3\x2\x2\x2#x\x3\x2\x2\x2%z\x3");
		sb.Append("\x2\x2\x2\'}\x3\x2\x2\x2)\x7F\x3\x2\x2\x2+\x82\x3\x2\x2\x2-");
		sb.Append("\x84\x3\x2\x2\x2/\x86\x3\x2\x2\x2\x31\x88\x3\x2\x2\x2\x33\x8A");
		sb.Append("\x3\x2\x2\x2\x35\x8D\x3\x2\x2\x2\x37\x92\x3\x2\x2\x2\x39\x98");
		sb.Append("\x3\x2\x2\x2;\xAA\x3\x2\x2\x2=\xAD\x3\x2\x2\x2?\xB3\x3\x2\x2");
		sb.Append("\x2\x41\x43\t\x2\x2\x2\x42\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2");
		sb.Append("\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\x4\x3\x2\x2");
		sb.Append("\x2\x46J\a$\x2\x2GI\v\x2\x2\x2HG\x3\x2\x2\x2IL\x3\x2\x2\x2J");
		sb.Append("K\x3\x2\x2\x2JH\x3\x2\x2\x2KM\x3\x2\x2\x2LJ\x3\x2\x2\x2MN\a");
		sb.Append("$\x2\x2N\x6\x3\x2\x2\x2OP\av\x2\x2PQ\at\x2\x2QR\aw\x2\x2RY\a");
		sb.Append("g\x2\x2ST\ah\x2\x2TU\a\x63\x2\x2UV\an\x2\x2VW\au\x2\x2WY\ag");
		sb.Append("\x2\x2XO\x3\x2\x2\x2XS\x3\x2\x2\x2Y\b\x3\x2\x2\x2Z[\a<\x2\x2");
		sb.Append("[\n\x3\x2\x2\x2\\]\a\x30\x2\x2]\f\x3\x2\x2\x2^_\a.\x2\x2_\xE");
		sb.Append("\x3\x2\x2\x2`\x61\a?\x2\x2\x61\x10\x3\x2\x2\x2\x62\x63\a?\x2");
		sb.Append("\x2\x63\x64\a?\x2\x2\x64\x12\x3\x2\x2\x2\x65\x66\a#\x2\x2\x66");
		sb.Append("g\a?\x2\x2g\x14\x3\x2\x2\x2hi\a(\x2\x2ij\a(\x2\x2j\x16\x3\x2");
		sb.Append("\x2\x2kl\a~\x2\x2lm\a~\x2\x2m\x18\x3\x2\x2\x2no\a-\x2\x2o\x1A");
		sb.Append("\x3\x2\x2\x2pq\a/\x2\x2q\x1C\x3\x2\x2\x2rs\a,\x2\x2s\x1E\x3");
		sb.Append("\x2\x2\x2tu\a\x31\x2\x2u \x3\x2\x2\x2vw\a\'\x2\x2w\"\x3\x2\x2");
		sb.Append("\x2xy\a>\x2\x2y$\x3\x2\x2\x2z{\a>\x2\x2{|\a?\x2\x2|&\x3\x2\x2");
		sb.Append("\x2}~\a@\x2\x2~(\x3\x2\x2\x2\x7F\x80\a@\x2\x2\x80\x81\a?\x2");
		sb.Append("\x2\x81*\x3\x2\x2\x2\x82\x83\a*\x2\x2\x83,\x3\x2\x2\x2\x84\x85");
		sb.Append("\a+\x2\x2\x85.\x3\x2\x2\x2\x86\x87\a}\x2\x2\x87\x30\x3\x2\x2");
		sb.Append("\x2\x88\x89\a\x7F\x2\x2\x89\x32\x3\x2\x2\x2\x8A\x8B\ak\x2\x2");
		sb.Append("\x8B\x8C\ah\x2\x2\x8C\x34\x3\x2\x2\x2\x8D\x8E\ag\x2\x2\x8E\x8F");
		sb.Append("\an\x2\x2\x8F\x90\au\x2\x2\x90\x91\ag\x2\x2\x91\x36\x3\x2\x2");
		sb.Append("\x2\x92\x93\ay\x2\x2\x93\x94\aj\x2\x2\x94\x95\ak\x2\x2\x95\x96");
		sb.Append("\an\x2\x2\x96\x97\ag\x2\x2\x97\x38\x3\x2\x2\x2\x98\x99\a\x31");
		sb.Append("\x2\x2\x99\x9A\a\x31\x2\x2\x9A\x9E\x3\x2\x2\x2\x9B\x9D\v\x2");
		sb.Append("\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D\xA0\x3\x2\x2\x2\x9E\x9F\x3\x2");
		sb.Append("\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA1\x3\x2\x2\x2\xA0\x9E\x3\x2");
		sb.Append("\x2\x2\xA1\xA2\x5;\x1E\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4\b\x1D");
		sb.Append("\x2\x2\xA4:\x3\x2\x2\x2\xA5\xA6\a\xF\x2\x2\xA6\xAB\a\f\x2\x2");
		sb.Append("\xA7\xA8\a\xF\x2\x2\xA8\xAB\a\f\x2\x2\xA9\xAB\t\x3\x2\x2\xAA");
		sb.Append("\xA5\x3\x2\x2\x2\xAA\xA7\x3\x2\x2\x2\xAA\xA9\x3\x2\x2\x2\xAB");
		sb.Append("<\x3\x2\x2\x2\xAC\xAE\t\x4\x2\x2\xAD\xAC\x3\x2\x2\x2\xAE\xAF");
		sb.Append("\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1");
		sb.Append("\x3\x2\x2\x2\xB1\xB2\b\x1F\x2\x2\xB2>\x3\x2\x2\x2\xB3\xB7\t");
		sb.Append("\x5\x2\x2\xB4\xB6\t\x6\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB9\x3");
		sb.Append("\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8@\x3\x2");
		sb.Append("\x2\x2\xB9\xB7\x3\x2\x2\x2\n\x2\x44JX\x9E\xAA\xAF\xB7\x3\b\x2");
		sb.Append("\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
